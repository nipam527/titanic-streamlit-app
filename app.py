# import streamlit as st
# import pandas as pd
# import joblib
# import os

# # --- Config ---
# st.set_page_config(page_title="üö¢ Titanic Survival Predictor", layout="centered")

# # --- Light Theme CSS (white & black only) ---
# st.markdown("""
# <style>
# body {
#     background-color: #ffffff;
#     color: #000000;
# }
# label, .stSelectbox label, .stSlider label {
#     font-weight: bold;
# }
# .css-1cpxqw2, .css-1d391kg {
#     background-color: #ffffff;
# }
# </style>
# """, unsafe_allow_html=True)

# # --- Load model safely ---
# MODEL_PATH = "nipam_titanic_model.pkl"

# if not os.path.exists(MODEL_PATH) or os.path.getsize(MODEL_PATH) == 0:
#     st.error("‚ùå Model file is missing or corrupted. Please check 'nipam_titanic_model.pkl'.")
#     st.stop()

# try:
#     model = joblib.load(MODEL_PATH)
# except Exception as e:
#     st.error(f"‚ùå Error loading model: {e}")
#     st.stop()

# # --- Title ---
# st.title("üö¢ Titanic Survival Prediction App")
# st.markdown("Enter passenger details below. Fields include placeholder values from real data.")

# # --- User Input with Placeholders ---
# sex = st.selectbox("Sex", ["Male", "Female"], index=0)
# age = st.slider("Age", min_value=1, max_value=80, value=29)
# fare = st.slider("Fare Paid ($)", min_value=0.0, max_value=500.0, value=32.20)
# pclass = st.selectbox("Passenger Class", [1, 2, 3], index=2)
# embarked = st.selectbox("Embarked Port", ["Cherbourg (C)", "Queenstown (Q)", "Southampton (S)"], index=2)
# sibsp = st.slider("Siblings/Spouses Aboard", min_value=0, max_value=5, value=1)
# parch = st.slider("Parents/Children Aboard", min_value=0, max_value=5, value=0)

# # --- Preprocess Input ---
# embarked_map = {"Cherbourg (C)": 0, "Queenstown (Q)": 1, "Southampton (S)": 2}
# input_data = pd.DataFrame([{
#     "sex": 0 if sex == "Male" else 1,
#     "age": age,
#     "fare": fare,
#     "pclass": pclass,
#     "family_size": sibsp + parch,
#     "embarked": embarked_map[embarked],
#     "sibsp": sibsp,
#     "parch": parch
# }])

# # --- Prediction ---
# if st.button("üéØ Predict Survival"):
#     try:
#         proba = model.predict_proba(input_data)[0][1]
#         threshold = 0.40
#         result = "‚úÖ Survived" if proba >= threshold else "‚ùå Not Survived"
#         st.success(f"üß† **Survival Probability:** `{proba:.2%}`")
#         st.markdown(f"### üéØ Prediction: **{result}**")
#     except Exception as e:
#         st.error(f"‚ùå Error during prediction: {e}")


import streamlit as st
import pandas as pd
import joblib
import os

# --- Page config ---
st.set_page_config(page_title="üö¢ Titanic Survival Predictor", layout="centered")

# --- Light Theme CSS ---
st.markdown("""
<style>
body {
    background-color: #ffffff;
    color: #000000;
}
label, .stSelectbox label, .stSlider label {
    font-weight: bold;
}
.css-1cpxqw2, .css-1d391kg {
    background-color: #ffffff;
}
</style>
""", unsafe_allow_html=True)

# --- Language selection ---
language = st.selectbox("üåê Select Language / ‡™≠‡™æ‡™∑‡™æ ‡™™‡™∏‡™Ç‡™¶ ‡™ï‡™∞‡´ã / ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç", ["English", "‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä", "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä"])

# --- Language Texts ---
texts = {
    "English": {
        "title": "üö¢ Titanic Survival Prediction App",
        "subtitle": "Enter passenger details below. Fields include placeholder values from real data.",
        "sex": "Sex",
        "age": "Age",
        "fare": "Fare Paid ($)",
        "pclass": "Passenger Class",
        "embarked": "Embarked Port",
        "sibsp": "Siblings/Spouses Aboard",
        "parch": "Parents/Children Aboard",
        "predict": "üéØ Predict Survival",
        "survived": "‚úÖ Survived",
        "not_survived": "‚ùå Not Survived",
        "prob": "üß† Survival Probability:",
        "prediction": "üéØ Prediction"
    },
    "‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä": {
        "title": "üö¢ ‡™ü‡™æ‡™á‡™ü‡´á‡™®‡™ø‡™ï ‡™ú‡´Ä‡™µ‡™§‡™æ ‡™¨‡™ö‡™µ‡™æ‡™®‡´ã ‡™Ö‡™®‡´Å‡™Æ‡™æ‡™® ‡™è‡™™",
        "subtitle": "‡™®‡´Ä‡™ö‡´á ‡™Æ‡´Å‡™∏‡™æ‡™´‡™∞ ‡™µ‡™ø‡™ó‡™§‡´ã ‡™¶‡™æ‡™ñ‡™≤ ‡™ï‡™∞‡´ã. ‡™´‡´Ä‡™≤‡´ç‡™°‡™Æ‡™æ‡™Ç ‡™Ö‡™∏‡™≤‡´Ä ‡™°‡´á‡™ü‡™æ‡™®‡™æ ‡™™‡´ç‡™∞‡™Æ‡™æ‡™£ ‡™§‡™∞‡´Ä‡™ï‡´á ‡™Æ‡´Ç‡™≤‡´ç‡™Ø‡´ã ‡™õ‡´á.",
        "sex": "‡™≤‡™ø‡™Ç‡™ó",
        "age": "‡™â‡™Ç‡™Æ‡™∞",
        "fare": "‡™ö‡´Ç‡™ï‡™µ‡´á‡™≤ ‡™≠‡™æ‡™°‡´Å‡™Ç ($)",
        "pclass": "‡™Æ‡´Å‡™∏‡™æ‡™´‡™∞‡´Ä ‡™µ‡™∞‡´ç‡™ó",
        "embarked": "‡™ö‡™¢‡´ç‡™Ø‡™æ ‡™π‡´ã‡™Ø ‡™§‡´á ‡™™‡´ã‡™∞‡´ç‡™ü",
        "sibsp": "‡™∏‡™ó‡™æ/‡™™‡™§‡™ø-‡™™‡™§‡´ç‡™®‡´Ä ‡™∏‡™æ‡™•‡´á",
        "parch": "‡™Æ‡™æ‡™§‡™æ-‡™™‡™ø‡™§‡™æ/‡™¨‡™æ‡™≥‡™ï‡´ã ‡™∏‡™æ‡™•‡´á",
        "predict": "üéØ ‡™ú‡´Ä‡™µ‡™§‡™æ ‡™¨‡™ö‡™µ‡™æ‡™®‡´ã ‡™Ö‡™®‡´Å‡™Æ‡™æ‡™® ‡™ï‡™∞‡´ã",
        "survived": "‚úÖ ‡™¨‡™ö‡´ç‡™Ø‡™æ ‡™õ‡´á",
        "not_survived": "‚ùå ‡™® ‡™¨‡™ö‡´ç‡™Ø‡™æ",
        "prob": "üß† ‡™ú‡´Ä‡™µ‡™§‡™æ ‡™¨‡™ö‡™µ‡™æ‡™®‡´Ä ‡™∂‡™ï‡´ç‡™Ø‡™§‡™æ:",
        "prediction": "üéØ ‡™Ö‡™®‡´Å‡™Æ‡™æ‡™®"
    },
    "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä": {
        "title": "üö¢ ‡§ü‡§æ‡§á‡§ü‡•à‡§®‡§ø‡§ï ‡§ú‡•Ä‡§µ‡§® ‡§∞‡§ï‡•ç‡§∑‡§æ ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä ‡§ê‡§™",
        "subtitle": "‡§®‡•Ä‡§ö‡•á ‡§Ø‡§æ‡§§‡•ç‡§∞‡•Ä ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§≤‡•Ä ‡§°‡•á‡§ü‡§æ ‡§∏‡•á ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§Æ‡§æ‡§® ‡§π‡•à‡§Ç‡•§",
        "sex": "‡§≤‡§ø‡§Ç‡§ó",
        "age": "‡§Ü‡§Ø‡•Å",
        "fare": "‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§ï‡§ø‡§∞‡§æ‡§Ø‡§æ ($)",
        "pclass": "‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§µ‡§∞‡•ç‡§ó",
        "embarked": "‡§ú‡§π‡§æ‡§Å ‡§∏‡•á ‡§ö‡§¢‡§º‡•á",
        "sibsp": "‡§∏‡§ó‡•á ‡§≠‡§æ‡§à-‡§¨‡§π‡§®/‡§™‡§§‡§ø-‡§™‡§§‡•ç‡§®‡•Ä ‡§∏‡§æ‡§•",
        "parch": "‡§Æ‡§æ‡§§‡§æ-‡§™‡§ø‡§§‡§æ/‡§¨‡§ö‡•ç‡§ö‡•á ‡§∏‡§æ‡§•",
        "predict": "üéØ ‡§ú‡•Ä‡§µ‡§® ‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ï‡§æ ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§® ‡§≤‡§ó‡§æ‡§è‡§Ç",
        "survived": "‚úÖ ‡§¨‡§ö ‡§ó‡§è",
        "not_survived": "‚ùå ‡§®‡§π‡•Ä‡§Ç ‡§¨‡§ö ‡§∏‡§ï‡•á",
        "prob": "üß† ‡§¨‡§ö‡§®‡•á ‡§ï‡•Ä ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ:",
        "prediction": "üéØ ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§®"
    }
}

# --- Load Model ---
MODEL_PATH = "nipam_titanic_model.pkl"

if not os.path.exists(MODEL_PATH) or os.path.getsize(MODEL_PATH) == 0:
    st.error("‚ùå Model file is missing or corrupted. Please check 'nipam_titanic_model.pkl'.")
    st.stop()

try:
    model = joblib.load(MODEL_PATH)
except Exception as e:
    st.error(f"‚ùå Error loading model: {e}")
    st.stop()

# --- Title and Subtitle ---
st.title(texts[language]["title"])
st.markdown(texts[language]["subtitle"])

# --- User Inputs ---
sex = st.selectbox(texts[language]["sex"], 
                   ["Male", "Female"] if language == "English" 
                   else ["‡™™‡´Å‡™∞‡´Å‡™∑", "‡™∏‡´ç‡™§‡´ç‡™∞‡´Ä"] if language == "‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä" 
                   else ["‡§™‡•Å‡§∞‡•Å‡§∑", "‡§Æ‡§π‡§ø‡§≤‡§æ"])

age = st.slider(texts[language]["age"], 1, 80, 29)
fare = st.slider(texts[language]["fare"], 0.0, 500.0, 32.20)
pclass = st.selectbox(texts[language]["pclass"], [1, 2, 3])

embarked_options = {
    "English": ["Cherbourg (C)", "Queenstown (Q)", "Southampton (S)"],
    "‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä": ["‡™∂‡´á‡™∞‡´ç‡™¨‡´ã‡™∞‡´ç‡™ó (C)", "‡™ï‡´ç‡™µ‡´Ä‡™®‡™∏‡´ç‡™ü‡™æ‡™â‡™® (Q)", "‡™∏‡™æ‡™â‡™•‡™π‡´á‡™Æ‡´ç‡™™‡´ç‡™ü‡™® (S)"],
    "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä": ["‡§∂‡•á‡§∞‡§¨‡§∞‡•ç‡§ó (C)", "‡§ï‡•ç‡§µ‡•Ä‡§®‡§∏‡•ç‡§ü‡§æ‡§â‡§® (Q)", "‡§∏‡§æ‡§â‡§•‡§π‡•à‡§Æ‡•ç‡§™‡•ç‡§ü‡§® (S)"]
}
embarked = st.selectbox(texts[language]["embarked"], embarked_options[language])

sibsp = st.slider(texts[language]["sibsp"], 0, 5, 1)
parch = st.slider(texts[language]["parch"], 0, 5, 0)

# --- Preprocessing ---
sex_val = 0 if sex in ["Male", "‡™™‡´Å‡™∞‡´Å‡™∑", "‡§™‡•Å‡§∞‡•Å‡§∑"] else 1

embarked_map = {
    "English": {"Cherbourg (C)": 0, "Queenstown (Q)": 1, "Southampton (S)": 2},
    "‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä": {"‡™∂‡´á‡™∞‡´ç‡™¨‡´ã‡™∞‡´ç‡™ó (C)": 0, "‡™ï‡´ç‡™µ‡´Ä‡™®‡™∏‡´ç‡™ü‡™æ‡™â‡™® (Q)": 1, "‡™∏‡™æ‡™â‡™•‡™π‡´á‡™Æ‡´ç‡™™‡´ç‡™ü‡™® (S)": 2},
    "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä": {"‡§∂‡•á‡§∞‡§¨‡§∞‡•ç‡§ó (C)": 0, "‡§ï‡•ç‡§µ‡•Ä‡§®‡§∏‡•ç‡§ü‡§æ‡§â‡§® (Q)": 1, "‡§∏‡§æ‡§â‡§•‡§π‡•à‡§Æ‡•ç‡§™‡•ç‡§ü‡§® (S)": 2}
}
embarked_val = embarked_map[language][embarked]

input_data = pd.DataFrame([{
    "sex": sex_val,
    "age": age,
    "fare": fare,
    "pclass": pclass,
    "family_size": sibsp + parch,
    "embarked": embarked_val,
    "sibsp": sibsp,
    "parch": parch
}])

# --- Prediction ---
if st.button(texts[language]["predict"]):
    try:
        proba = model.predict_proba(input_data)[0][1]
        threshold = 0.40
        result = texts[language]["survived"] if proba >= threshold else texts[language]["not_survived"]
        st.success(f"{texts[language]['prob']} `{proba:.2%}`")
        st.markdown(f"### {texts[language]['prediction']}: **{result}**")
    except Exception as e:
        st.error(f"‚ùå Error during prediction: {e}")
